import { query } from '../../lib/sql_wrapper';

async function handlePurchase(req, res) {

  //buyer id and arrays for listings to buy and discounts.
  //For every listing, there is an id and a quantity to buy
  const tax = 0.0825;
  const { buyer_id, listings, discounts } = req.body;

  try {
    let listings_to_buy = [];
    let order_total = 0;
    let discount_total = 0;

    // fetch the price and seller of each listing
    let queryStr = `
      SELECT LISTING_PRICE, USER_ID, LISTING_QUANTITY, (LISTING_PRICE * LISTING_QUANTITY) AS SUBTOTAL
      FROM LISTING
      WHERE LISTING_ID IN (${listings.map(listing => listing.listing_id).join(', ')});
    `
    let result = [];
    let data = await query({ query: queryStr, values: [result] });

    for (let i = 0; i < listings.length; i++) {
      const { listing_id, quantity } = listings[i];

        const found_price = data[i].LISTING_PRICE;
        const found_quantity = data[i].LISTING_QUANTITY;
        const found_seller_id = data[i].USER_ID;
        const subtotal = data[i].SUBTOTAL;

        //verify that the listing has enough quantity
        if (quantity > found_quantity) {
          res.status(400).json({ error: "Listing is out of stock" });
          return;
        } 

        listings_to_buy.push({ 
          seller_id: found_seller_id,  listing_id, quantity, subtotal
        });
        order_total += found_price * quantity;
    }

    if (discounts.length > 0) {
      queryStr = `
        SELECT SUM(DISCOUNT_PERCENT) AS TOTAL_DISCOUNT
        FROM DISCOUNT
        WHERE DISCOUNT_ID IN (${discounts.join(', ')});
      `;

      console.log(queryStr)
      result = [];
      data = await query({ query: queryStr, values: [result] });
      discount_total = data[0].TOTAL_DISCOUNT;
    }

    const final_price = (order_total / (1 + tax)) * (1 - discount_total/100);
    //create new order
    queryStr = `
      INSERT INTO ORDER_ (
        ORDER_DATE, ORDER_TOTAL, BUYER_ID
      ) VALUES (
        CURDATE(), ${final_price}, ${buyer_id}
      )`;
      console.log(queryStr);
    result = [];
    data = await query({ query: queryStr, values: [result] });

    const order_id = data.insertId; //The order id generated by mysql after insertion

    for (let i = 0; i < listings_to_buy.length; i++) {
      const sub_order = listings_to_buy[i];
      const queryStr = `
        INSERT INTO ORDER_SUBTABLE (
          ORDER_ID, SELLER_ID, LISTING_ID, ORDER_QUANTITY, ORDER_SUBTOTAL
        ) VALUES (
          ${order_id}, ${sub_order.seller_id}, ${sub_order.listing_id}, ${sub_order.quantity}, ${sub_order.subtotal}
        )`;
        console.log(queryStr);
      result = [];
      data = await query({ query: queryStr, values: [result] });
    }
    res.status(200).json({ status:  "success"});

  } catch(err) {
    res.status(500).json({ error: err.message });
  }

}

async function handleEdit(req, res) {

}

async function handleDelete(req, res) {

  const { order_id } = req.body;

  try {
    let queryStr = 
      `DELETE FROM ORDER_ WHERE ORDER_ID = '${order_id}'`;
    let result = [];
    let data = await query({ query: queryStr, values: [result] });

    // queryStr = 
    //   `DELETE FROM ORDER_SUBTABLE WHERE ORDER_ID = '${order_id}'`;
    // result = [];
    // data = await query({ query: queryStr, values: [result] });

    res.status(200).json({ query: data });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }

}

async function handleSearch(req, res) {
  const { order_by, order_id, user_id } = req.query;

  //only order queries for now
  var order_by_query = '';
  if (order_by == 'customer') {
    order_by_query = 'ORDER BY ORDER_.BUYER_ID';
  }
  if (order_by == 'date') {
    order_by_query = 'ORDER BY ORDER_.ORDER_DATE';
  }
  if (order_by == 'subtotal') {
    order_by_query = 'ORDER BY ORDER_.ORDER_TOTAL';
  }

  try {

    const queryStr =`
      SELECT ORDER_ID, ORDER_DATE, ORDER_TOTAL, BUYER_ID FROM ORDER_ ${order_by_query}
    `;

    const result = [];
    const data = await query({ query: queryStr, values: [result] });

    //Convert query into custom object
    const orders = [];
    //order object contains data of the order, and array of subtable properties
    for (let i = 0; i < data.length; i++) {
      const queryStr =`
         SELECT SELLER_ID, LISTING_ID, ORDER_QUANTITY, ORDER_SUBTOTAL FROM ORDER_SUBTABLE WHERE ORDER_ID = ${data[i].ORDER_ID} 
      `;
      const result = [];
      const sub_data = await query({ query: queryStr, values: [result] });

      const listings = [];
      for (let j = 0; j < sub_data.length; j++) {
        listings.push({
          seller_id: sub_data[j].SELLER_ID,
          listing_id: sub_data[j].LISTING_ID,
          quantity: sub_data[j].ORDER_QUANTITY,
          subtotal: sub_data[j].ORDER_SUBTOTAL
        });
      }

      orders.push({
        order_id: data[i].ORDER_ID,
        order_date: data[i].ORDER_DATE,
        order_total: data[i].ORDER_TOTAL,
        buyer_id: data[i].BUYER_ID,
        listings: listings
      });
    }
    res.status(200).json({ orders: orders });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
}

export default async function handler(req, res) {

  switch (req.method) {
    case 'GET':
      handleSearch(req, res);
      break;
    case 'POST':
      handlePurchase(req, res);
      break;
    case 'PATCH':
      handleEdit(req, res);
      break;
    case 'DELETE':
      handleDelete(req, res);
      break;
    default:
      res.status(400).json({ error: "Invalid request" });
  }

}